//
// Copyright (c) 2019 Oracle and/or its affiliates. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Authors:
//  Mahesh Kannan
//  Jonathan Knight

// NamedCacheService message types
//

syntax = "proto3";

package coherence;

import "messages.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

option java_multiple_files = true;

// A gRPC NamedCache service.
//
service NamedCacheService {

    // Clear a cache.
    rpc clear(ClearRequest) returns (google.protobuf.Empty) {}

    // Check if this map contains a mapping for the specified key to the specified value.
    rpc containsEntry(ContainsEntryRequest) returns (google.protobuf.BoolValue) {}

    // Check if this map contains a mapping for the specified key.
    rpc containsKey(ContainsKeyRequest) returns (google.protobuf.BoolValue) {}

    // Check if this map contains a mapping for the specified value.
    rpc containsValue(ContainsValueRequest) returns (google.protobuf.BoolValue) {}

    // Determine whether a cache is empty.
    rpc isEmpty(IsEmptyRequest) returns (google.protobuf.BoolValue) {}

    // Get a value for a given key from a cache.
    rpc get(GetRequest) returns (google.protobuf.BytesValue) {}

    // Associate the specified value with the specified key in this cache.
    // If the cache previously contained a mapping for the key, the old value
    // is replaced by the specified value.
    rpc put(PutRequest) returns (google.protobuf.BytesValue) {}

    // If the specified key is not already associated with a value (or is mapped
    // to null associate it with the given value and returns null, else return
    // the current value.
    rpc putIfAbsent(PutIfAbsentRequest) returns (google.protobuf.BytesValue) {}

    // Remove the mapping that is associated with the specified key.
    rpc remove(RemoveRequest) returns (google.protobuf.BytesValue) {}

    // Remove the mapping that is associated with the specified key only
    // if the mapping exists in the cache.
    rpc removeMapping(RemoveMappingRequest) returns (google.protobuf.BoolValue) {}

    // Replace the entry for the specified key only if it is currently
    // mapped to some value.
    rpc replace(ReplaceRequest) returns (google.protobuf.BytesValue) {}

    // Replace the mapping for the specified key only if currently mapped
    // to the specified value.
    rpc replaceMapping(ReplaceMappingRequest) returns (google.protobuf.BoolValue) {}

    // Determine the number of entries in a cache.
    rpc size(SizeRequest) returns (google.protobuf.Int32Value) {}

    // Get the next page of a paged entry set request.
    rpc nextEntrySetPage(PageRequest) returns (stream EntryResult){}

}
